Language Implementation:

--vector types
--sane numeric casting rules for constants

--calling lua functions from terra
-- union annontations in struct types
-- code quotations of statements and expressions
-- good error message for when there is a circular dependency on global variable initialization
-- string literals translated to uint8* types
-- an opaque type (equivalent to void* in C)

Runtime Implementation:

-- how to save results for later (both Lua state and Terra JIT state)
-- how to use clang to read C header files

DONE:
--function pointers
--anonymous structural type cast to other structural types
--methods on types (declaration syntax )
--methods on types (call syntax/resolution) 
-- -> and & syntax need to work in normal lua code (not just type resolution)
-- types should be presented in the AST as the string of lua code to run to get the type rather than an AST needed to be interpreted--eval types:
   change types to have either canonical versions or exist as proxy objects
   type constructors (e.g. pointer to) should ask if a type is canonical and create a proxy if not)
--pointer arithmetic
--array types
--resolvetype needs to allow the declaration of anonymous structural types
--macros in terra
-- explicit casts (pointer to pointer, requires macros to somewhat work)
-- constructor syntax with a function in last position should create 1 anonymous entry per return value of the function
