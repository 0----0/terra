Language Implementation:

--vector types
--sane numeric casting rules for constants
--calling lua functions from terra
-- code quotations of statements and expressions
-- good error message for when there is a circular dependency on global variable initializationlocation like old C for now)

Runtime Implementation:

-- how to save results for later (both Lua state and Terra JIT state)

DONE:
--function pointers
--anonymous structural type cast to other structural types
--methods on types (declaration syntax )
--methods on types (call syntax/resolution) 
-- -> and & syntax need to work in normal lua code (not just type resolution)
-- types should be presented in the AST as the string of lua code to run to get the type rather than an AST needed to be interpreted--eval types:
   change types to have either canonical versions or exist as proxy objects
   type constructors (e.g. pointer to) should ask if a type is canonical and create a proxy if not)
--pointer arithmetic
--array types
--resolvetype needs to allow the declaration of anonymous structural types
--macros in terra
-- explicit casts (pointer to pointer, requires macros to somewhat work)
-- constructor syntax with a function in last position should create 1 anonymous entry per return value of the function
-- string literals translated to int8* types
-- how to use clang to read C header files
-- an opaque type (equivalent to void* in C) (? another alternative is to just use int8* for  now) (went with: no unsized opaque types, but some imported c types do now expose internals)
-- support typedefs and record types in C header files
-- automatic conversion from any pointer to &uint8
-- nil should translate to any pointer type's NULL value, this will require adding an implicit conversion for <nulltype> to any pointer type,
   and allowing nulltype to exist
-- union annontations in struct types
